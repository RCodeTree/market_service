#!/usr/bin/env node

/**
 * 模块依赖
 */

var app = require('../src/app');
var debug = require('debug')('market-service:server');
var http = require('http');

/**
 * 从环境变量获取端口并存储到 Express 中
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * 创建 HTTP 服务器
 */

var server = http.createServer(app);

/**
 * 在指定端口上监听所有网络接口
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * 将端口标准化为数字、字符串或 false
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // 命名管道
    return val;
  }

  if (port >= 0) {
    // 端口号
    return port;
  }

  return false;
}

/**
 * HTTP 服务器 "error" 事件监听器
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // 处理特定的监听错误并显示友好消息
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * HTTP 服务器 "listening" 事件监听器
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('🚀 Market Service 服务器启动成功！');
  console.log('📍 服务地址: http://localhost:' + addr.port);
  console.log('📚 API文档: http://localhost:' + addr.port + '/api');
}
